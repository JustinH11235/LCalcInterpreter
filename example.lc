# This is using the standard library function POW, ints are Church Numerals, bools are Church Booleans
int :: POW 2 3

# This is the same result but printed as a function
function :: POW 2 3

# Same as above
POW 2 3

# If you try to print as a bool when it is not, it will revert to a function
bool :: POW 2 3

# This is an example of an actual bool
bool :: IS_EVEN 6
IS_EVEN 6

# 0 happens to be defined as equal to FALSE
0
FALSE
int :: IS_EVEN 7

# However TRUE is not a valid int
1
TRUE
int :: IS_EVEN 6

# You can define your own functions as well
MY_FUNC := (\b.\e.e b)

# MY_FUNC happens to be the same as the stdlib function POW
int :: MY_FUNC 2 3

# You can use a combination of backslash and λ
(\hi_im_a_var.λim_also_a_var.TRUE 1 0)

# We can get fancy with recursion using the Y-Combinator stdlib function
MY_REC := Y (\r.\m.IF_THEN_ELSE (IS_ZERO m) 1 ( MULT m (r (PRED m)) ))

# This prints factorial(4)
int :: MY_REC 4

# You can take it from there
